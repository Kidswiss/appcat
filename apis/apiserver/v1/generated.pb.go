// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: .work/tmp/github.com/vshn/appcat/v4/apis/apiserver/v1/generated.proto

package v1

import (
	fmt "fmt"

	io "io"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	runtime "k8s.io/apimachinery/pkg/runtime"

	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *AppCat) Reset()      { *m = AppCat{} }
func (*AppCat) ProtoMessage() {}
func (*AppCat) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{0}
}
func (m *AppCat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppCat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppCat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppCat.Merge(m, src)
}
func (m *AppCat) XXX_Size() int {
	return m.Size()
}
func (m *AppCat) XXX_DiscardUnknown() {
	xxx_messageInfo_AppCat.DiscardUnknown(m)
}

var xxx_messageInfo_AppCat proto.InternalMessageInfo

func (m *AppCatList) Reset()      { *m = AppCatList{} }
func (*AppCatList) ProtoMessage() {}
func (*AppCatList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{1}
}
func (m *AppCatList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppCatList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppCatList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppCatList.Merge(m, src)
}
func (m *AppCatList) XXX_Size() int {
	return m.Size()
}
func (m *AppCatList) XXX_DiscardUnknown() {
	xxx_messageInfo_AppCatList.DiscardUnknown(m)
}

var xxx_messageInfo_AppCatList proto.InternalMessageInfo

func (m *AppCatStatus) Reset()      { *m = AppCatStatus{} }
func (*AppCatStatus) ProtoMessage() {}
func (*AppCatStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{2}
}
func (m *AppCatStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppCatStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppCatStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppCatStatus.Merge(m, src)
}
func (m *AppCatStatus) XXX_Size() int {
	return m.Size()
}
func (m *AppCatStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AppCatStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AppCatStatus proto.InternalMessageInfo

func (m *SGBackupInfo) Reset()      { *m = SGBackupInfo{} }
func (*SGBackupInfo) ProtoMessage() {}
func (*SGBackupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{3}
}
func (m *SGBackupInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SGBackupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SGBackupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SGBackupInfo.Merge(m, src)
}
func (m *SGBackupInfo) XXX_Size() int {
	return m.Size()
}
func (m *SGBackupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SGBackupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SGBackupInfo proto.InternalMessageInfo

func (m *VSHNMariaDBBackup) Reset()      { *m = VSHNMariaDBBackup{} }
func (*VSHNMariaDBBackup) ProtoMessage() {}
func (*VSHNMariaDBBackup) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{4}
}
func (m *VSHNMariaDBBackup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VSHNMariaDBBackup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VSHNMariaDBBackup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VSHNMariaDBBackup.Merge(m, src)
}
func (m *VSHNMariaDBBackup) XXX_Size() int {
	return m.Size()
}
func (m *VSHNMariaDBBackup) XXX_DiscardUnknown() {
	xxx_messageInfo_VSHNMariaDBBackup.DiscardUnknown(m)
}

var xxx_messageInfo_VSHNMariaDBBackup proto.InternalMessageInfo

func (m *VSHNMariaDBBackupList) Reset()      { *m = VSHNMariaDBBackupList{} }
func (*VSHNMariaDBBackupList) ProtoMessage() {}
func (*VSHNMariaDBBackupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{5}
}
func (m *VSHNMariaDBBackupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VSHNMariaDBBackupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VSHNMariaDBBackupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VSHNMariaDBBackupList.Merge(m, src)
}
func (m *VSHNMariaDBBackupList) XXX_Size() int {
	return m.Size()
}
func (m *VSHNMariaDBBackupList) XXX_DiscardUnknown() {
	xxx_messageInfo_VSHNMariaDBBackupList.DiscardUnknown(m)
}

var xxx_messageInfo_VSHNMariaDBBackupList proto.InternalMessageInfo

func (m *VSHNMariaDBBackupStatus) Reset()      { *m = VSHNMariaDBBackupStatus{} }
func (*VSHNMariaDBBackupStatus) ProtoMessage() {}
func (*VSHNMariaDBBackupStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{6}
}
func (m *VSHNMariaDBBackupStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VSHNMariaDBBackupStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VSHNMariaDBBackupStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VSHNMariaDBBackupStatus.Merge(m, src)
}
func (m *VSHNMariaDBBackupStatus) XXX_Size() int {
	return m.Size()
}
func (m *VSHNMariaDBBackupStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VSHNMariaDBBackupStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VSHNMariaDBBackupStatus proto.InternalMessageInfo

func (m *VSHNPlan) Reset()      { *m = VSHNPlan{} }
func (*VSHNPlan) ProtoMessage() {}
func (*VSHNPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{7}
}
func (m *VSHNPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VSHNPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VSHNPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VSHNPlan.Merge(m, src)
}
func (m *VSHNPlan) XXX_Size() int {
	return m.Size()
}
func (m *VSHNPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_VSHNPlan.DiscardUnknown(m)
}

var xxx_messageInfo_VSHNPlan proto.InternalMessageInfo

func (m *VSHNPostgresBackup) Reset()      { *m = VSHNPostgresBackup{} }
func (*VSHNPostgresBackup) ProtoMessage() {}
func (*VSHNPostgresBackup) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{8}
}
func (m *VSHNPostgresBackup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VSHNPostgresBackup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VSHNPostgresBackup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VSHNPostgresBackup.Merge(m, src)
}
func (m *VSHNPostgresBackup) XXX_Size() int {
	return m.Size()
}
func (m *VSHNPostgresBackup) XXX_DiscardUnknown() {
	xxx_messageInfo_VSHNPostgresBackup.DiscardUnknown(m)
}

var xxx_messageInfo_VSHNPostgresBackup proto.InternalMessageInfo

func (m *VSHNPostgresBackupList) Reset()      { *m = VSHNPostgresBackupList{} }
func (*VSHNPostgresBackupList) ProtoMessage() {}
func (*VSHNPostgresBackupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{9}
}
func (m *VSHNPostgresBackupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VSHNPostgresBackupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VSHNPostgresBackupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VSHNPostgresBackupList.Merge(m, src)
}
func (m *VSHNPostgresBackupList) XXX_Size() int {
	return m.Size()
}
func (m *VSHNPostgresBackupList) XXX_DiscardUnknown() {
	xxx_messageInfo_VSHNPostgresBackupList.DiscardUnknown(m)
}

var xxx_messageInfo_VSHNPostgresBackupList proto.InternalMessageInfo

func (m *VSHNPostgresBackupStatus) Reset()      { *m = VSHNPostgresBackupStatus{} }
func (*VSHNPostgresBackupStatus) ProtoMessage() {}
func (*VSHNPostgresBackupStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{10}
}
func (m *VSHNPostgresBackupStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VSHNPostgresBackupStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VSHNPostgresBackupStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VSHNPostgresBackupStatus.Merge(m, src)
}
func (m *VSHNPostgresBackupStatus) XXX_Size() int {
	return m.Size()
}
func (m *VSHNPostgresBackupStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VSHNPostgresBackupStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VSHNPostgresBackupStatus proto.InternalMessageInfo

func (m *VSHNRedisBackup) Reset()      { *m = VSHNRedisBackup{} }
func (*VSHNRedisBackup) ProtoMessage() {}
func (*VSHNRedisBackup) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{11}
}
func (m *VSHNRedisBackup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VSHNRedisBackup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VSHNRedisBackup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VSHNRedisBackup.Merge(m, src)
}
func (m *VSHNRedisBackup) XXX_Size() int {
	return m.Size()
}
func (m *VSHNRedisBackup) XXX_DiscardUnknown() {
	xxx_messageInfo_VSHNRedisBackup.DiscardUnknown(m)
}

var xxx_messageInfo_VSHNRedisBackup proto.InternalMessageInfo

func (m *VSHNRedisBackupList) Reset()      { *m = VSHNRedisBackupList{} }
func (*VSHNRedisBackupList) ProtoMessage() {}
func (*VSHNRedisBackupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{12}
}
func (m *VSHNRedisBackupList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VSHNRedisBackupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VSHNRedisBackupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VSHNRedisBackupList.Merge(m, src)
}
func (m *VSHNRedisBackupList) XXX_Size() int {
	return m.Size()
}
func (m *VSHNRedisBackupList) XXX_DiscardUnknown() {
	xxx_messageInfo_VSHNRedisBackupList.DiscardUnknown(m)
}

var xxx_messageInfo_VSHNRedisBackupList proto.InternalMessageInfo

func (m *VSHNRedisBackupStatus) Reset()      { *m = VSHNRedisBackupStatus{} }
func (*VSHNRedisBackupStatus) ProtoMessage() {}
func (*VSHNRedisBackupStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{13}
}
func (m *VSHNRedisBackupStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VSHNRedisBackupStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VSHNRedisBackupStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VSHNRedisBackupStatus.Merge(m, src)
}
func (m *VSHNRedisBackupStatus) XXX_Size() int {
	return m.Size()
}
func (m *VSHNRedisBackupStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VSHNRedisBackupStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VSHNRedisBackupStatus proto.InternalMessageInfo

func (m *VSHNSize) Reset()      { *m = VSHNSize{} }
func (*VSHNSize) ProtoMessage() {}
func (*VSHNSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_e52127b6bc976b86, []int{14}
}
func (m *VSHNSize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VSHNSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VSHNSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VSHNSize.Merge(m, src)
}
func (m *VSHNSize) XXX_Size() int {
	return m.Size()
}
func (m *VSHNSize) XXX_DiscardUnknown() {
	xxx_messageInfo_VSHNSize.DiscardUnknown(m)
}

var xxx_messageInfo_VSHNSize proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AppCat)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.AppCat")
	proto.RegisterMapType((Details)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.AppCat.DetailsEntry")
	proto.RegisterMapType((map[string]VSHNPlan)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.AppCat.PlansEntry")
	proto.RegisterType((*AppCatList)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.AppCatList")
	proto.RegisterType((*AppCatStatus)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.AppCatStatus")
	proto.RegisterType((*SGBackupInfo)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.SGBackupInfo")
	proto.RegisterType((*VSHNMariaDBBackup)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.VSHNMariaDBBackup")
	proto.RegisterType((*VSHNMariaDBBackupList)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.VSHNMariaDBBackupList")
	proto.RegisterType((*VSHNMariaDBBackupStatus)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.VSHNMariaDBBackupStatus")
	proto.RegisterType((*VSHNPlan)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.VSHNPlan")
	proto.RegisterType((*VSHNPostgresBackup)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.VSHNPostgresBackup")
	proto.RegisterType((*VSHNPostgresBackupList)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.VSHNPostgresBackupList")
	proto.RegisterType((*VSHNPostgresBackupStatus)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.VSHNPostgresBackupStatus")
	proto.RegisterType((*VSHNRedisBackup)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.VSHNRedisBackup")
	proto.RegisterType((*VSHNRedisBackupList)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.VSHNRedisBackupList")
	proto.RegisterType((*VSHNRedisBackupStatus)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.VSHNRedisBackupStatus")
	proto.RegisterType((*VSHNSize)(nil), "github.com.vshn.appcat.v4.apis.apiserver.v1.VSHNSize")
}

func init() {
	proto.RegisterFile(".work/tmp/github.com/vshn/appcat/v4/apis/apiserver/v1/generated.proto", fileDescriptor_e52127b6bc976b86)
}

var fileDescriptor_e52127b6bc976b86 = []byte{
	// 1015 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xda, 0xce, 0x8f, 0x3e, 0x07, 0x92, 0x0c, 0x94, 0x1a, 0x4b, 0xb8, 0x91, 0x0f, 0xa8,
	0xa2, 0x74, 0x96, 0x84, 0x80, 0x4a, 0x85, 0x0a, 0xdd, 0x38, 0x02, 0x43, 0x13, 0xd2, 0x4d, 0x41,
	0x11, 0xe2, 0xc0, 0x78, 0x77, 0xea, 0x4c, 0x9d, 0xfd, 0xa1, 0x9d, 0xf1, 0x96, 0xf4, 0xc4, 0x89,
	0x33, 0x7f, 0x07, 0x17, 0xc4, 0xff, 0x80, 0x50, 0x8e, 0x3d, 0x41, 0x85, 0x50, 0x21, 0x8e, 0xf8,
	0x27, 0x38, 0xa1, 0xd9, 0x19, 0xdb, 0x6b, 0x3b, 0x26, 0xb1, 0x83, 0xac, 0x5e, 0xa2, 0x9d, 0x99,
	0xfd, 0xbe, 0xef, 0xbd, 0x37, 0xef, 0x7b, 0x1b, 0xc3, 0x26, 0x7e, 0x14, 0x44, 0x4d, 0x53, 0x78,
	0xa1, 0xd9, 0x60, 0x62, 0xbf, 0x55, 0xc7, 0x4e, 0xe0, 0x99, 0x31, 0xdf, 0xf7, 0x4d, 0x12, 0x86,
	0x0e, 0x11, 0x66, 0xbc, 0x6e, 0x92, 0x90, 0xf1, 0xe4, 0x0f, 0x8d, 0x62, 0x1a, 0x99, 0xf1, 0xaa,
	0xd9, 0xa0, 0x3e, 0x8d, 0x88, 0xa0, 0x2e, 0x0e, 0xa3, 0x40, 0x04, 0xe8, 0x7a, 0x0f, 0x8c, 0x25,
	0x18, 0x2b, 0x30, 0x8e, 0xd7, 0xb1, 0xc4, 0xe1, 0x2e, 0x18, 0xc7, 0xab, 0xa5, 0x1b, 0x29, 0xa5,
	0x46, 0xd0, 0x08, 0xcc, 0x84, 0xa3, 0xde, 0x7a, 0x90, 0xac, 0x92, 0x45, 0xf2, 0xa4, 0xb8, 0x4b,
	0xeb, 0xcd, 0x9b, 0x1c, 0xb3, 0x40, 0x06, 0xe0, 0x11, 0x67, 0x9f, 0xf9, 0x34, 0x3a, 0x34, 0xc3,
	0x66, 0x43, 0x85, 0xe5, 0x51, 0x41, 0x4e, 0x89, 0xa8, 0x64, 0x8e, 0x42, 0x45, 0x2d, 0x5f, 0x30,
	0x8f, 0x0e, 0x01, 0xde, 0x3d, 0x0b, 0xc0, 0x9d, 0x7d, 0xea, 0x91, 0x41, 0x5c, 0xe5, 0xb7, 0x3c,
	0xcc, 0xde, 0x09, 0xc3, 0x0d, 0x22, 0xd0, 0xd7, 0x30, 0x2f, 0xc3, 0x71, 0x89, 0x20, 0x45, 0x63,
	0xc5, 0xb8, 0x56, 0x58, 0x7b, 0x0b, 0x2b, 0x56, 0x9c, 0x66, 0xc5, 0x61, 0xb3, 0xa1, 0xca, 0x22,
	0xdf, 0xc6, 0xf1, 0x2a, 0xfe, 0xac, 0xfe, 0x90, 0x3a, 0x62, 0x8b, 0x0a, 0x62, 0xa1, 0xa3, 0x67,
	0x57, 0x33, 0xed, 0x67, 0x57, 0xa1, 0xb7, 0x67, 0x77, 0x59, 0x51, 0x0c, 0x73, 0x2e, 0x15, 0x84,
	0x1d, 0xf0, 0x62, 0x76, 0x25, 0x77, 0xad, 0xb0, 0xf6, 0x21, 0x1e, 0xa3, 0xf2, 0x58, 0xc5, 0x89,
	0xab, 0x8a, 0x62, 0xd3, 0x17, 0xd1, 0xa1, 0x55, 0xd2, 0x82, 0x73, 0x7a, 0xf7, 0x9f, 0xde, 0xa3,
	0xdd, 0x11, 0x43, 0x0e, 0xcc, 0x84, 0x07, 0xc4, 0xe7, 0xc5, 0x5c, 0xa2, 0x7a, 0x7b, 0x12, 0xd5,
	0x1d, 0x49, 0xa0, 0x34, 0x5f, 0xd0, 0x9a, 0x33, 0xc9, 0x9e, 0xad, 0xb8, 0x11, 0x81, 0x59, 0x2e,
	0x88, 0x68, 0xf1, 0x62, 0x3e, 0x29, 0xde, 0x7b, 0x13, 0xa8, 0xec, 0x26, 0x04, 0xd6, 0x8b, 0x5a,
	0x60, 0x56, 0xad, 0x6d, 0x4d, 0x5c, 0xba, 0x05, 0x0b, 0xe9, 0xe4, 0xd1, 0x12, 0xe4, 0x9a, 0xf4,
	0x30, 0xb9, 0xac, 0x4b, 0xb6, 0x7c, 0x44, 0x2f, 0xc3, 0x4c, 0x4c, 0x0e, 0x5a, 0xb4, 0x98, 0x4d,
	0xf6, 0xd4, 0xe2, 0x56, 0xf6, 0xa6, 0x51, 0x0a, 0x00, 0x7a, 0x29, 0x9c, 0x82, 0xfc, 0x34, 0x8d,
	0x2c, 0xac, 0xbd, 0x33, 0x56, 0xf4, 0x5f, 0xec, 0x7e, 0xbc, 0x2d, 0xd9, 0x53, 0x82, 0x95, 0x9f,
	0x0d, 0x00, 0x95, 0xd5, 0x5d, 0xc6, 0x05, 0xfa, 0x6a, 0xa8, 0xbb, 0xf0, 0xf9, 0xba, 0x4b, 0xa2,
	0x93, 0xde, 0x5a, 0xd2, 0x55, 0x99, 0xef, 0xec, 0xa4, 0x3a, 0x6b, 0x0f, 0x66, 0x98, 0xa0, 0x5e,
	0xa7, 0xaf, 0xde, 0x9e, 0xa0, 0xf6, 0xbd, 0x6b, 0xad, 0x49, 0x26, 0x5b, 0x11, 0x56, 0xee, 0xc1,
	0x42, 0xfa, 0x6e, 0xd0, 0x1d, 0x58, 0x74, 0x02, 0x2f, 0x0c, 0x38, 0x13, 0x2c, 0xf0, 0xb7, 0x89,
	0x47, 0x55, 0x15, 0xad, 0x2b, 0x1a, 0xbe, 0xb8, 0xd1, 0x7f, 0x6c, 0x0f, 0xbe, 0x5f, 0xf9, 0x25,
	0x0b, 0x0b, 0xbb, 0x1f, 0x59, 0xc4, 0x69, 0xb6, 0xc2, 0x9a, 0xff, 0x20, 0x40, 0x2e, 0x40, 0xd0,
	0xf5, 0xcb, 0xff, 0xea, 0xbd, 0x14, 0x2f, 0xda, 0x83, 0xb9, 0x30, 0x0a, 0x1c, 0xca, 0xb9, 0xbe,
	0xe3, 0x1b, 0x23, 0x25, 0xf4, 0xd0, 0xc0, 0x36, 0x79, 0xb4, 0xf9, 0x8d, 0xa0, 0x3e, 0x67, 0x81,
	0x6f, 0x2d, 0x76, 0xac, 0xb6, 0xa3, 0x58, 0xec, 0x0e, 0x1d, 0x8a, 0x61, 0xb9, 0xde, 0xcd, 0x26,
	0xf2, 0x88, 0xcc, 0xb4, 0x98, 0x9b, 0x44, 0xe3, 0x55, 0xad, 0xb1, 0x6c, 0x0d, 0xf2, 0xd9, 0xc3,
	0x12, 0x95, 0x13, 0x03, 0x96, 0x65, 0xeb, 0x6d, 0x91, 0x88, 0x91, 0xaa, 0xa5, 0x30, 0x53, 0x98,
	0x63, 0x07, 0x5d, 0xab, 0xab, 0x42, 0x56, 0xc7, 0x36, 0x4b, 0x5f, 0xc4, 0xff, 0xed, 0xfa, 0xca,
	0xef, 0x06, 0x5c, 0x1e, 0xc2, 0x4c, 0xc1, 0x53, 0x4e, 0xbf, 0xa7, 0x6e, 0x5f, 0x2c, 0xc9, 0x11,
	0xf6, 0xfa, 0xc9, 0x80, 0x2b, 0x23, 0x0a, 0x82, 0x4a, 0x90, 0x65, 0xae, 0x76, 0x17, 0x68, 0x74,
	0xb6, 0x56, 0xb5, 0xb3, 0xcc, 0x45, 0x77, 0x21, 0xef, 0x12, 0xd1, 0x99, 0x56, 0x6f, 0x9c, 0x2f,
	0xed, 0xfb, 0xcc, 0xa3, 0xd6, 0x82, 0x66, 0xca, 0x57, 0x89, 0xa0, 0x76, 0xc2, 0x82, 0xde, 0x84,
	0x79, 0xe6, 0x73, 0x41, 0x7c, 0x87, 0x26, 0x7d, 0x7b, 0xa9, 0x57, 0x98, 0x9a, 0xde, 0xb7, 0xbb,
	0x6f, 0x54, 0xbe, 0x33, 0x60, 0xbe, 0x33, 0xf1, 0xd0, 0x0a, 0xe4, 0xfd, 0x40, 0x74, 0x86, 0x40,
	0x97, 0x7c, 0x3b, 0x90, 0xe4, 0xf2, 0x04, 0xed, 0x41, 0x9e, 0xb3, 0xc7, 0x93, 0x0f, 0xd6, 0x5d,
	0xf6, 0x98, 0xf6, 0xaa, 0xf7, 0x89, 0x5c, 0xda, 0x09, 0x63, 0xe5, 0x6f, 0x03, 0x50, 0x12, 0x48,
	0xc0, 0x45, 0x23, 0xa2, 0x7c, 0x6a, 0x06, 0xf0, 0x06, 0x0c, 0xb0, 0x39, 0xfe, 0xd7, 0xa2, 0x2f,
	0xe4, 0x33, 0x1c, 0xf0, 0x87, 0x01, 0xaf, 0x0c, 0x83, 0xa6, 0x60, 0x01, 0xb7, 0xdf, 0x02, 0x1f,
	0x5c, 0x30, 0xcd, 0x11, 0x1e, 0xf8, 0x21, 0x0b, 0xc5, 0x51, 0x35, 0x41, 0xf7, 0x7b, 0x53, 0xdb,
	0x98, 0x64, 0xa2, 0x16, 0x4e, 0x9d, 0xd8, 0xd1, 0x69, 0x13, 0x7b, 0xa2, 0xaf, 0xc2, 0xe5, 0xf3,
	0x4e, 0x6b, 0x54, 0x85, 0x25, 0x59, 0xd4, 0x3a, 0xe1, 0xb4, 0xd6, 0x6f, 0xb6, 0xa2, 0x2e, 0xcb,
	0x52, 0x75, 0xe0, 0xdc, 0x1e, 0x42, 0x54, 0xfe, 0x34, 0x60, 0x51, 0x16, 0xcb, 0xa6, 0x2e, 0x9b,
	0x5e, 0xc3, 0x3f, 0x1c, 0x68, 0x78, 0x6b, 0xec, 0x4e, 0x48, 0xc5, 0x7b, 0x46, 0xb7, 0xff, 0x6a,
	0xc0, 0x4b, 0x03, 0x88, 0x29, 0xb4, 0x3a, 0xe9, 0x6f, 0xf5, 0xf7, 0x2f, 0x92, 0xe0, 0x88, 0x3e,
	0xff, 0x51, 0x7f, 0xc8, 0x86, 0x4a, 0xf1, 0xdc, 0x4e, 0x7a, 0xae, 0x06, 0xbd, 0x1c, 0xb9, 0xe8,
	0x35, 0xc8, 0x39, 0x61, 0x4b, 0x07, 0x59, 0xd0, 0xa0, 0xdc, 0xc6, 0xce, 0xe7, 0xb6, 0xdc, 0x97,
	0xdf, 0x01, 0x97, 0xf1, 0xa6, 0xfa, 0xc7, 0x3b, 0x25, 0xcd, 0x78, 0xd3, 0x4e, 0x4e, 0xd0, 0xeb,
	0x30, 0xeb, 0x51, 0x2f, 0x88, 0x0e, 0xb5, 0x70, 0xf7, 0xfe, 0xb7, 0x92, 0x5d, 0x5b, 0x9f, 0x5a,
	0xf7, 0x8e, 0x8e, 0xcb, 0x99, 0x27, 0xc7, 0xe5, 0xcc, 0xd3, 0xe3, 0x72, 0xe6, 0xdb, 0x76, 0xd9,
	0x38, 0x6a, 0x97, 0x8d, 0x27, 0xed, 0xb2, 0xf1, 0xb4, 0x5d, 0x36, 0xfe, 0x6a, 0x97, 0x8d, 0xef,
	0x4f, 0xca, 0x99, 0x2f, 0xaf, 0x8f, 0xf1, 0x83, 0xf7, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc,
	0xc3, 0x33, 0x1f, 0x28, 0x0f, 0x00, 0x00,
}

func (m *AppCat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppCat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppCat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Plans) > 0 {
		keysForPlans := make([]string, 0, len(m.Plans))
		for k := range m.Plans {
			keysForPlans = append(keysForPlans, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForPlans)
		for iNdEx := len(keysForPlans) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Plans[string(keysForPlans[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForPlans[iNdEx])
			copy(dAtA[i:], keysForPlans[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForPlans[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Details) > 0 {
		keysForDetails := make([]string, 0, len(m.Details))
		for k := range m.Details {
			keysForDetails = append(keysForDetails, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForDetails)
		for iNdEx := len(keysForDetails) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Details[string(keysForDetails[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForDetails[iNdEx])
			copy(dAtA[i:], keysForDetails[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForDetails[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppCatList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppCatList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppCatList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppCatStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppCatStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppCatStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.CompositionName)
	copy(dAtA[i:], m.CompositionName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CompositionName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SGBackupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGBackupInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SGBackupInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BackupInformation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Process.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VSHNMariaDBBackup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VSHNMariaDBBackup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VSHNMariaDBBackup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VSHNMariaDBBackupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VSHNMariaDBBackupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VSHNMariaDBBackupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VSHNMariaDBBackupStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VSHNMariaDBBackupStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VSHNMariaDBBackupStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Instance)
	copy(dAtA[i:], m.Instance)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Instance)))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Date.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.ID)
	copy(dAtA[i:], m.ID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VSHNPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VSHNPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VSHNPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.JSize.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.Note)
	copy(dAtA[i:], m.Note)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Note)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VSHNPostgresBackup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VSHNPostgresBackup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VSHNPostgresBackup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VSHNPostgresBackupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VSHNPostgresBackupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VSHNPostgresBackupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VSHNPostgresBackupStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VSHNPostgresBackupStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VSHNPostgresBackupStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.DatabaseInstance)
	copy(dAtA[i:], m.DatabaseInstance)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DatabaseInstance)))
	i--
	dAtA[i] = 0x1a
	if m.BackupInformation != nil {
		{
			size, err := m.BackupInformation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Process != nil {
		{
			size, err := m.Process.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VSHNRedisBackup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VSHNRedisBackup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VSHNRedisBackup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VSHNRedisBackupList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VSHNRedisBackupList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VSHNRedisBackupList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VSHNRedisBackupStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VSHNRedisBackupStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VSHNRedisBackupStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Instance)
	copy(dAtA[i:], m.Instance)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Instance)))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Date.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.ID)
	copy(dAtA[i:], m.ID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VSHNSize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VSHNSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VSHNSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Memory)
	copy(dAtA[i:], m.Memory)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Memory)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Disk)
	copy(dAtA[i:], m.Disk)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Disk)))
	i--
	dAtA[i] = 0x12
	i -= len(m.CPU)
	copy(dAtA[i:], m.CPU)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CPU)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppCat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Details) > 0 {
		for k, v := range m.Details {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.Plans) > 0 {
		for k, v := range m.Plans {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + l + sovGenerated(uint64(l))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AppCatList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AppCatStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompositionName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *SGBackupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Process.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.BackupInformation.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VSHNMariaDBBackup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VSHNMariaDBBackupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *VSHNMariaDBBackupStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Date.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Instance)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VSHNPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Note)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.JSize.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VSHNPostgresBackup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VSHNPostgresBackupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *VSHNPostgresBackupStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Process != nil {
		l = m.Process.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.BackupInformation != nil {
		l = m.BackupInformation.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.DatabaseInstance)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VSHNRedisBackup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VSHNRedisBackupList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *VSHNRedisBackupStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Date.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Instance)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VSHNSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CPU)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Disk)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Memory)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AppCat) String() string {
	if this == nil {
		return "nil"
	}
	keysForDetails := make([]string, 0, len(this.Details))
	for k := range this.Details {
		keysForDetails = append(keysForDetails, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDetails)
	mapStringForDetails := "Details{"
	for _, k := range keysForDetails {
		mapStringForDetails += fmt.Sprintf("%v: %v,", k, this.Details[k])
	}
	mapStringForDetails += "}"
	keysForPlans := make([]string, 0, len(this.Plans))
	for k := range this.Plans {
		keysForPlans = append(keysForPlans, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPlans)
	mapStringForPlans := "map[string]VSHNPlan{"
	for _, k := range keysForPlans {
		mapStringForPlans += fmt.Sprintf("%v: %v,", k, this.Plans[k])
	}
	mapStringForPlans += "}"
	s := strings.Join([]string{`&AppCat{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Details:` + mapStringForDetails + `,`,
		`Plans:` + mapStringForPlans + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "AppCatStatus", "AppCatStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppCatList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]AppCat{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "AppCat", "AppCat", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&AppCatList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppCatStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppCatStatus{`,
		`CompositionName:` + fmt.Sprintf("%v", this.CompositionName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SGBackupInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGBackupInfo{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Process:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Process), "RawExtension", "runtime.RawExtension", 1), `&`, ``, 1) + `,`,
		`BackupInformation:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.BackupInformation), "RawExtension", "runtime.RawExtension", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VSHNMariaDBBackup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VSHNMariaDBBackup{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "VSHNMariaDBBackupStatus", "VSHNMariaDBBackupStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VSHNMariaDBBackupList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]VSHNMariaDBBackup{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "VSHNMariaDBBackup", "VSHNMariaDBBackup", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&VSHNMariaDBBackupList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *VSHNMariaDBBackupStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VSHNMariaDBBackupStatus{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Date:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Date), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`Instance:` + fmt.Sprintf("%v", this.Instance) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VSHNPlan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VSHNPlan{`,
		`Note:` + fmt.Sprintf("%v", this.Note) + `,`,
		`JSize:` + strings.Replace(strings.Replace(this.JSize.String(), "VSHNSize", "VSHNSize", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VSHNPostgresBackup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VSHNPostgresBackup{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "VSHNPostgresBackupStatus", "VSHNPostgresBackupStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VSHNPostgresBackupList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]VSHNPostgresBackup{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "VSHNPostgresBackup", "VSHNPostgresBackup", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&VSHNPostgresBackupList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *VSHNPostgresBackupStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VSHNPostgresBackupStatus{`,
		`Process:` + strings.Replace(fmt.Sprintf("%v", this.Process), "RawExtension", "runtime.RawExtension", 1) + `,`,
		`BackupInformation:` + strings.Replace(fmt.Sprintf("%v", this.BackupInformation), "RawExtension", "runtime.RawExtension", 1) + `,`,
		`DatabaseInstance:` + fmt.Sprintf("%v", this.DatabaseInstance) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VSHNRedisBackup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VSHNRedisBackup{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "VSHNRedisBackupStatus", "VSHNRedisBackupStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VSHNRedisBackupList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]VSHNRedisBackup{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "VSHNRedisBackup", "VSHNRedisBackup", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&VSHNRedisBackupList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *VSHNRedisBackupStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VSHNRedisBackupStatus{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Date:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Date), "Time", "v1.Time", 1), `&`, ``, 1) + `,`,
		`Instance:` + fmt.Sprintf("%v", this.Instance) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VSHNSize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VSHNSize{`,
		`CPU:` + fmt.Sprintf("%v", this.CPU) + `,`,
		`Disk:` + fmt.Sprintf("%v", this.Disk) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AppCat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = make(Details)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Details[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plans == nil {
				m.Plans = make(map[string]VSHNPlan)
			}
			var mapkey string
			mapvalue := &VSHNPlan{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGenerated
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGenerated
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VSHNPlan{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Plans[mapkey] = *mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppCatList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCatList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCatList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, AppCat{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppCatStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCatStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCatStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompositionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompositionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGBackupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGBackupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGBackupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Process.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackupInformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VSHNMariaDBBackup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VSHNMariaDBBackup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VSHNMariaDBBackup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VSHNMariaDBBackupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VSHNMariaDBBackupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VSHNMariaDBBackupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, VSHNMariaDBBackup{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VSHNMariaDBBackupStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VSHNMariaDBBackupStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VSHNMariaDBBackupStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Date.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VSHNPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VSHNPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VSHNPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VSHNPostgresBackup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VSHNPostgresBackup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VSHNPostgresBackup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VSHNPostgresBackupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VSHNPostgresBackupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VSHNPostgresBackupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, VSHNPostgresBackup{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VSHNPostgresBackupStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VSHNPostgresBackupStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VSHNPostgresBackupStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Process == nil {
				m.Process = &runtime.RawExtension{}
			}
			if err := m.Process.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BackupInformation == nil {
				m.BackupInformation = &runtime.RawExtension{}
			}
			if err := m.BackupInformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseInstance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseInstance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VSHNRedisBackup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VSHNRedisBackup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VSHNRedisBackup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VSHNRedisBackupList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VSHNRedisBackupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VSHNRedisBackupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, VSHNRedisBackup{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VSHNRedisBackupStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VSHNRedisBackupStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VSHNRedisBackupStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Date.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VSHNSize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VSHNSize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VSHNSize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPU", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPU = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Disk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
